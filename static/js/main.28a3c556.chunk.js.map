{"version":3,"sources":["serviceWorker.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","robots.js","components/ErrorBoundry.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","userName","email","id","className","src","alt","CardList","robots","map","user","i","key","username","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hadError","error","info","this","setState","hasError","Component","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.28a3c556.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, userName, email, id }) => {\r\n  return (\r\n    <div className=\" bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/test${id}?10*10`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{userName}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            userName={robots[i].username}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"500px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: \"Leanne Graham\",\r\n    username: \"Bret\",\r\n    email: \"Sincere@april.biz\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Kuli Bally\",\r\n    username: \"Antonette\",\r\n    email: \"Shanna@melissa.tv\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"VAN DUKH\",\r\n    username: \"Samantha\",\r\n    email: \"Nathan@yesenia.net\"\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Lanselot\",\r\n    username: \"Karianne\",\r\n    email: \"Julianne.OConner@kory.org\"\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Muhammed Salah Layehudim\",\r\n    username: \"Kamren\",\r\n    email: \"Lucio_Hettinger@annie.ca\"\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Karit Benzema\",\r\n    username: \"Leopoldo_Corkery\",\r\n    email: \"Karley_Dach@jasper.info\"\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Kostas Manolas\",\r\n    username: \"Elwyn.Skiles\",\r\n    email: \"Telly.Hoeger@billy.biz\"\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Nicholas Runolfsdottir V\",\r\n    username: \"Maxime_Nienow\",\r\n    email: \"Sherwood@rosamond.me\"\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Pique Blanket\",\r\n    username: \"Delphine\",\r\n    email: \"Chaim_McDermott@dana.io\"\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Napolitano\",\r\n    username: \"Moriah.Stanton\",\r\n    email: \"Rey.Padberg@karina.biz\"\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hadError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  s;\r\n  render() {\r\n    if (this.state.hadError) {\r\n      return <h1>Oooops, That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport { robots } from \"../robots\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: robots,\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({\r\n      searchField: event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(this.state.searchField.toLocaleLowerCase());\r\n    });\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport App from \"./containers/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}